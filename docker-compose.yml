
version: '3.8'

services:
  # Main application service
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://cryptosurf:gamepass@postgres:5432/crypto_surf_dev
      - REDIS_URL=redis://redis:6379
      - NEXT_PUBLIC_API_URL=http://localhost:3000/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # PostgreSQL database for core game data
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crypto_surf_dev
      - POSTGRES_USER=cryptosurf
      - POSTGRES_PASSWORD=gamepass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - crypto-surf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptosurf -d crypto_surf_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispass
    volumes:
      - redis_data:/data
    networks:
      - crypto-surf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MongoDB for market data and analytics
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=cryptosurf
      - MONGO_INITDB_ROOT_PASSWORD=mongopass
      - MONGO_INITDB_DATABASE=crypto_surf_market
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - crypto-surf-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  # WebSocket server for real-time data
  websocket:
    build: 
      context: .
      dockerfile: Dockerfile.websocket
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - WS_PORT=3001
    depends_on:
      - redis
      - mongodb
    networks:
      - crypto-surf-network
    restart: unless-stopped
    volumes:
      - ./src/websocket:/app/src/websocket

  # Market data collector service
  market-data-collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    environment:
      - NODE_ENV=development
      - MONGODB_URL=mongodb://cryptosurf:mongopass@mongodb:27017/crypto_surf_market?authSource=admin
      - REDIS_URL=redis://redis:6379
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - COINBASE_API_KEY=${COINBASE_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
    depends_on:
      - mongodb
      - redis
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # NGINX reverse proxy for local development
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
      - websocket
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # Blockchain development node (Hardhat)
  hardhat-node:
    build:
      context: ./contracts
      dockerfile: Dockerfile.hardhat
    ports:
      - "8545:8545"
    volumes:
      - ./contracts:/app
    command: npx hardhat node --hostname 0.0.0.0
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # IPFS node for NFT metadata storage
  ipfs:
    image: ipfs/kubo:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - crypto-surf-network
    restart: unless-stopped
    environment:
      - IPFS_PROFILE=server

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # ElasticSearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - node.name=es01
      - cluster.name=crypto-surf-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - crypto-surf-network
    restart: unless-stopped

  # Test runner service for CI/CD
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://cryptosurf:gamepass@postgres:5432/crypto_surf_test
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - crypto-surf-network
    profiles:
      - testing

networks:
  crypto-surf-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  ipfs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local


