
name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: |
          npm run lint
          npm run lint:report
        continue-on-error: true
      
      - name: Run Prettier check
        run: npm run prettier:check
      
      - name: TypeScript compilation
        run: npm run type-check
      
      - name: Security audit
        run: |
          npm audit --audit-level=moderate
          npm run audit:report
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
      
      - name: Upload lint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-results
          path: |
            eslint-report.json
            audit-report.json

  # Job 2: Unit and Integration Tests  
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: crypto_surf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/crypto_surf_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
      
      - name: Run database migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test
      
      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false
        env:
          NODE_ENV: test
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Game Engine Tests
  game-tests:
    name: Game Engine & Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install browsers for testing
        run: npx playwright install --with-deps
      
      - name: Build game assets
        run: |
          npm run build:assets
          npm run optimize:sprites
      
      - name: Run game logic tests
        run: npm run test:game
      
      - name: Run performance tests
        run: npm run test:performance
      
      - name: Run end-to-end tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-artifacts
          path: |
            test-results/
            screenshots/
            videos/

  # Job 4: Build & Docker
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: |
          npm run build
          npm run build:analyze
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            dist/
            .next/
            build-analysis.json
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Smart Contract Tests (when applicable)
  smart-contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[blockchain]') || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd contracts && npm ci
      
      - name: Compile contracts
        run: |
          cd contracts
          npx hardhat compile
      
      - name: Run contract tests
        run: |
          cd contracts
          npx hardhat test
          npx hardhat coverage
      
      - name: Run gas usage analysis
        run: |
          cd contracts
          npx hardhat test --gas-report
      
      - name: Security analysis with Slither
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          target: 'contracts/'
          slither-args: '--exclude-dependencies'
        continue-on-error: true
      
      - name: Upload contract artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-artifacts
          path: |
            contracts/artifacts/
            contracts/coverage/
            gas-report.txt

  # Job 6: Deployment Preview (for PRs)
  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
      
      - name: Deploy to preview environment
        run: |
          # Deploy to staging environment
          echo "Deploying PR #${{ github.event.number }} to preview"
          # TODO: FILL_ME - Add actual preview deployment script
      
      - name: Comment PR with preview link
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment ready!\n\n**Preview URL**: https://preview-${{ github.event.number }}.cryptosurf.game\n\n*This preview will be available for 7 days.*'
            })

  # Job 7: Lighthouse Performance Audit
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [preview-deployment]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://preview-${{ github.event.number }}.cryptosurf.game
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Job 8: Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Run axe accessibility tests
        run: npm run test:a11y
      
      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: accessibility-report.html

  # Job 9: Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, test, game-tests, build, smart-contracts]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.game-tests.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All required jobs passed!"
      
      - name: Notify success
        if: success() && github.ref == 'refs/heads/main'
        run: |
          echo "ðŸŽ‰ Main branch CI passed! Ready for deployment."
          # TODO: FILL_ME - Add Slack/Discord notification


